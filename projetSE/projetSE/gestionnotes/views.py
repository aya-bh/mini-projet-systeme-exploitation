from datetime import datetime

from django.contrib import messages
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.template.loader import get_template

from .decorators import unauthentificated_user, allowed_users, admin_only
from django.contrib.auth.hashers import make_password, check_password
from .forms import *
from .models import Etudiant
from .models import Enseignant
from .models import Element
from .models import Module
from .models import Filiere
from .models import Admin
from .models import Notes
from .models import Inscription
from .models import Semestre
from .models import Cycle
from .models import Enseigne
from django.contrib.auth.models import User, Group
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth.models import User,auth
from django.views.generic import View

from gestionnotes.utils import render_to_pdf

@unauthentificated_user
def logout(request):
    auth.logout(request)
    return redirect('/accounts/login')


@login_required(login_url="/accounts/login/")
def index(request):
    nbetudiant = Etudiant.objects.count()
    nbenseignant = Enseignant.objects.count()
    return render(request,'gestionnotes/dashboard.html', {'nbetudiant': nbetudiant,'nbenseignant': nbenseignant })


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant","Etudiant"])
def indexetudiant(request):
    students = Etudiant.objects.all()
    return render(request, 'student/index.html', {'students': students})

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant","Etudiant"])
def indexinscription(request):
    inscriptions = Inscription.objects.all()
    return render(request, 'inscription/index.html', {'inscriptions': inscriptions})

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant"])
def indexstudy(request):
    enseignes = Enseigne.objects.all()
    return render(request, 'study/index.html', {'enseignes': enseignes})


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def indexadministrateur(request):
    admins = Admin.objects.all()
    return render(request, 'administrateur/index.html', {'admins': admins})

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant"])
def indexenseignant(request):
    teachers = Enseignant.objects.all()
    return render(request, 'teacher/index.html', {'teachers': teachers})

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant","Etudiant"])
def indexelement(request):
    elements = Element.objects.all()
    return render(request, 'element/index.html', {'elements': elements})


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant","Etudiant"])
def indexfiliere(request):
    filieres = Filiere.objects.all()
    return render(request, 'filiere/index.html', {'filieres': filieres})

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def indexsemestre(request):
    semestres = Semestre.objects.all()
    return render(request, 'semestre/index.html', {'semestres': semestres})

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def indexcycle(request):
    cycles = Cycle.objects.all()
    return render(request, 'cycle/index.html', {'cycles': cycles})


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant"])
def indexmodule(request):
    modules = Module.objects.all()
    elements = Element.objects.all()
    return render(request, 'module/index.html', {'modules': modules, 'elements': elements })

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant","Etudiant"])
def indexnote(request):
    modules = Module.objects.all()
    elements = Element.objects.all()
    etudiants = Etudiant.objects.all()
    notes = Notes.objects.all()

    return render(request, 'note/index.html', {'modules': modules, 'elements': elements, 'etudiants': etudiants, 'notes': notes })


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createetudiant(request):
    form = EtudiantCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = EtudiantCreate(request.POST)
        if form.is_valid():
            etud = form.save(commit=False)
            pass_word = request.POST.get("password", "")
            etud.password = make_password(pass_word)
            etud.save()
            my_group = Group.objects.get(name='etudiant')
            my_group.user_set.add(etud)
            etud.save()
            messages.success(request, 'the student is added')
            return redirect('/student')
    context={'form':form}
    return render(request,'student/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createsemestre(request):
    form = SemestreCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = SemestreCreate(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'the semester is added')
            return redirect('/semestre')
    context={'form':form}
    return render(request,'semestre/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createfiliere(request):
    form = FiliereCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = FiliereCreate(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'the filier is added')
            return redirect('/filiere')
    context={'form':form}
    return render(request,'filiere/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createadministrateur(request):
    form = AdminCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = AdminCreate(request.POST)
        if form.is_valid():
            etud = form.save(commit=False)
            pass_word = request.POST.get("password", "")
            etud.password = make_password(pass_word)
            etud.save()
            my_group = Group.objects.get(name='admin')
            my_group.user_set.add(etud)
            etud.save()
            messages.success(request, 'the admin is added')
            return redirect('/administrateur')
    context={'form':form}
    return render(request,'administrateur/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createenseignant(request):
    form = EnseignantCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = EnseignantCreate(request.POST)
        if form.is_valid():
            etud = form.save(commit=False)
            pass_word = request.POST.get("password", "")
            etud.password = make_password(pass_word)
            etud.save()
            my_group = Group.objects.get(name='enseignant')
            my_group.user_set.add(etud)
            etud.save()
            messages.success(request, 'the teacher is added')
            return redirect('/teacher')
    context={'form':form}
    return render(request,'teacher/form.html',context)



@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant"])
def createnote(request):
    elements = Element.objects.all()
    etudiants = Etudiant.objects.all()
    form = NoteCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = NoteCreate(request.POST)
        if form.is_valid():
            note = form.save(commit=False)
            note.Element = request.POST['element']
            note.Etudiant = request.POST['etudiant']
            note.save()
            messages.success(request, 'the note is added')
            return redirect('/note')
    context={'form': form, 'elements': elements, 'etudiants': etudiants}
    return render(request,'note/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createinscription(request):
    filieres = Filiere.objects.all()
    etudiants = Etudiant.objects.all()
    form = InscriptionCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = InscriptionCreate(request.POST)
        if form.is_valid():
            insc = form.save(commit=False)
            insc.Filiere = request.POST['filiere']
            insc.Etudiant = request.POST['etudiant']
            insc.save()
            messages.success(request, 'the inscription is added')
            return redirect('/inscription')
    context={'form':form,'filieres':filieres, 'etudiants': etudiants}
    return render(request,'inscription/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createelement(request):
    modules=Module.objects.all()
    form = ElementCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = ElementCreate(request.POST)
        if form.is_valid():
            ele = form.save(commit=False)
            ele.Module = request.POST['module']
            ele.save()
            messages.success(request, 'the element is added')
            return redirect('/element')
    context={'form':form, 'modules': modules,}
    return render(request,'element/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createcycle(request):
    filieres=Filiere.objects.all()
    form = CycleCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = CycleCreate(request.POST)
        if form.is_valid():
            cy = form.save(commit=False)
            cy.Filiere = request.POST['filiere']
            cy.save()
            messages.success(request, 'the cycle is added')
            return redirect('/cycle')
    context={'form':form, 'filieres': filieres,}
    return render(request,'cycle/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createstudy(request):
    elements =Element.objects.all()
    enseignants =Enseignant.objects.all()
    form = EnseigneCreate()
    if request.method == 'POST':
        #print("Printering POST", request.POST)
        form = EnseigneCreate(request.POST)
        if form.is_valid():
            ens = form.save(commit=False)
            ens.Element = request.POST['element']
            ens.Enseignant = request.POST['enseignant']
            ens.save()
            messages.success(request, 'the plan is added')
            return redirect('/study')
    context={'form':form, 'elements': elements, 'enseignants': enseignants,}
    return render(request,'study/form.html',context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def createmodule(request):
    elements= Element.objects.all()
    form = ModuleCreate(request.POST or None)
    if form.is_valid():
        form.save()
        messages.success(request,'the module is added')
        return redirect('/module')
    context = {
        'form': form,
        'elements': elements,
    }

    return render(request ,'module/form.html',context)


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updateetudiant(request, pk):
    etudiant = Etudiant.objects.get(id=pk)
    form = EtudiantCreate(instance=etudiant)
    if request.method == 'POST':
        form = EtudiantCreate(request.POST, instance=etudiant)
        if form.is_valid():
            etud = form.save(commit=False)
            pass_word = request.POST.get("password", "")
            etud.password = make_password(pass_word)
            etud.save()
            messages.success(request, 'the student is updated')
            return redirect('/student')
    context = {'form': form, 'etudiant':etudiant}
    return render(request, 'student/form.html', context)


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updateadministrateur(request, pk):
    admin = Admin.objects.get(id=pk)
    form = AdminCreate(instance=admin)
    if request.method == 'POST':
        form = AdminCreate(request.POST, instance=admin)
        if form.is_valid():
            etud = form.save(commit=False)
            pass_word = request.POST.get("password", "")
            etud.password = make_password(pass_word)
            etud.save()
            messages.success(request, 'the admin is updated')
            return redirect('/administrateur')
    context = {'form': form,'admin':admin}
    return render(request, 'administrateur/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant"])
def updateenseignant(request, pk):
    enseignant = Enseignant.objects.get(id=pk)
    form = EnseignantCreate(instance=enseignant)
    if request.method == 'POST':
        form = EnseignantCreate(request.POST, instance=enseignant)
        if form.is_valid():
            etud = form.save(commit=False)
            pass_word = request.POST.get("password", "")
            etud.password = make_password(pass_word)
            etud.save()
            messages.success(request, 'the teacher is updated')
            return redirect('/teacher')
    context = {'form': form,'enseignant':enseignant}
    return render(request, 'teacher/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updatesemestre(request, pk):
    semestre = Semestre.objects.get(id=pk)
    form = SemestreCreate(instance=semestre)
    if request.method == 'POST':
        form = SemestreCreate(request.POST, instance=semestre)
        if form.is_valid():
            form.save()
            messages.success(request, 'the semester is updated')
            return redirect('/semestre')
    context = {'form': form, 'semestre':semestre}
    return render(request, 'semestre/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updatefiliere(request, pk):
    filiere = Filiere.objects.get(id=pk)
    form = FiliereCreate(instance=filiere)
    if request.method == 'POST':
        form = FiliereCreate(request.POST, instance=filiere)
        if form.is_valid():
            form.save()
            messages.success(request, 'the filiere is updated')
            return redirect('/filiere')
    context = {'form': form, 'filiere':filiere}
    return render(request, 'filiere/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant"])
def updatenote(request, pk):
    elements = Element.objects.all()
    etudiants = Etudiant.objects.all()
    note = Notes.objects.get(id=pk)
    form = NoteCreate(instance=note)
    if request.method == 'POST':
        form = NoteCreate(request.POST, instance=note)
        if form.is_valid():
            form.save()
            messages.success(request, 'the notes is updated')
            return redirect('/note')
    context = {'form': form , 'note': note, 'elements': elements, 'etudiants': etudiants}
    return render(request, 'note/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updateinscription(request, pk):
    filieres = Filiere.objects.all()
    etudiants = Etudiant.objects.all()
    inscription = Inscription.objects.get(id=pk)
    form = InscriptionCreate(instance=inscription)
    if request.method == 'POST':
        form = InscriptionCreate(request.POST, instance=inscription)
        if form.is_valid():
            form.save()
            messages.success(request, 'the inscription  is updated')
            return redirect('/inscription')
    context = {'form': form, 'inscription':inscription, 'filieres':filieres, 'etudiants':etudiants}
    return render(request, 'inscription/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updateelement(request, pk):
    modules = Module.objects.all()
    element = Element.objects.get(id=pk)
    form = ElementCreate(instance=element)
    if request.method == 'POST':
        form = ElementCreate(request.POST, instance=element)
        if form.is_valid():
            form.save()
            messages.success(request, 'the element is updated')
            return redirect('/element')
    context={'form':form, 'modules': modules,'element': element,}
    return render(request, 'element/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updatestudy(request, pk):
    enseignants = Enseignant.objects.all()
    elements = Element.objects.all()
    enseigne = Enseigne.objects.get(id=pk)
    form = EnseigneCreate(instance=enseigne)
    if request.method == 'POST':
        form = EnseigneCreate(request.POST, instance=enseigne)
        if form.is_valid():
            form.save()
            messages.success(request, 'the studying is updated')
            return redirect('/study')
    context={'form':form, 'enseignants': enseignants, 'elements': elements, 'enseigne':enseigne}
    return render(request, 'study/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updatecycle(request, pk):
    filieres = Filiere.objects.all()
    cycle = Cycle.objects.get(id=pk)
    form = CycleCreate(instance=cycle)
    if request.method == 'POST':
        form = CycleCreate(request.POST, instance=cycle)
        if form.is_valid():
            form.save()
            messages.success(request, 'the cycle is updated')
            return redirect('/cycle')
    context={'form':form, 'cycle': cycle, 'filieres':filieres}
    return render(request, 'cycle/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def updatemodule(request, pk):
    module = Module.objects.get(id=pk)
    moduleform = ModuleCreate(instance=module)
    if request.method == 'POST':
        moduleform = ModuleCreate(request.POST, instance=module)
        if moduleform.is_valid() :
            moduleform.save()
            messages.success(request, 'the module is updated')
            return redirect('/module')
    context = {'form': moduleform, 'module':module}
    return render(request, 'module/form.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deleteetudiant(request, pk):
    etudiant = Etudiant.objects.get(id=pk)
    if request.method == 'POST':
        etudiant.delete()
        messages.success(request, 'the student is deleted')
        return HttpResponseRedirect("/student")
    context = {'item': etudiant}
    return render(request, 'student/delete.html', context)


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deleteadministrateur(request, pk):
    admin = Admin.objects.get(id=pk)
    if request.method == 'POST':
        admin.delete()
        messages.success(request, 'the admin is deleted')
        return HttpResponseRedirect("/administrateur")
    context = {'item': admin}
    return render(request, 'administrateur/delete.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deleteenseignant(request, pk):
    enseignant = Enseignant.objects.get(id=pk)
    if request.method == 'POST':
        enseignant.delete()
        messages.success(request, 'the teacher is deleted')
        return redirect('/teacher')
    context = {'item': enseignant}
    return render(request, 'teacher/delete.html', context)



@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deleteelement(request, pk):
    element = Element.objects.get(id=pk)
    if request.method == 'POST':
        element.delete()
        messages.success(request, 'the element is deleted')
        return redirect('/element')
    context = {'item': element}
    return render(request, 'element/delete.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deletesemestre(request, pk):
    semestre = Semestre.objects.get(id=pk)
    if request.method == 'POST':
        semestre.delete()
        messages.success(request, 'the semester is deleted')
        return redirect('/semestre')
    context = {'item': semestre}
    return render(request, 'semestre/delete.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deletefiliere(request, pk):
    filiere = Filiere.objects.get(id=pk)
    if request.method == 'POST':
        filiere.delete()
        messages.success(request, 'the filiere is deleted')
        return redirect('/filiere')
    context = {'item': filiere}
    return render(request, 'filiere/delete.html', context)


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deletemodule(request, pk):
    module = Module.objects.get(id=pk)
    if request.method == 'POST':
        module.delete()
        messages.success(request, 'the module is deleted')
        return redirect('/module')
    context = {'item': module}
    return render(request, 'module/delete.html', context)


@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deletecycle(request, pk):
    cycle = Cycle.objects.get(id=pk)
    if request.method == 'POST':
        cycle.delete()
        messages.success(request, 'the cycle is deleted')
        return redirect('/cycle')
    context = {'item': cycle}
    return render(request, 'module/delete.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin","Enseignant"])
def deletenote(request, pk):
    note = Notes.objects.get(id=pk)
    if request.method == 'POST':
        note.delete()
        messages.success(request, 'the notes is deleted')
        return redirect('/note')
    context = {'item': note}
    return render(request, 'note/delete.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deleteinscription(request, pk):
    insc = Inscription.objects.get(id=pk)
    if request.method == 'POST':
        insc.delete()
        messages.success(request, 'the inscription is deleted')
        return redirect('/inscription')
    context = {'item': insc}
    return render(request, 'inscription/delete.html', context)

@login_required(login_url="/accounts/login/")
@allowed_users(allowed_roles=["Admin"])
def deletestudy(request, pk):
    ens = Enseigne.objects.get(id=pk)
    if request.method == 'POST':
        ens.delete()
        messages.success(request, 'the plan of studying is deleted')
        return redirect('/study')
    context = {'item': ens}
    return render(request, 'study/delete.html', context)


class GeneratePDF(View):
    def get(self, request, *args, **kwargs):
        template = get_template('notepdf.html')
        notes = Notes.objects.all()
        context = {
            "notes": notes
        }
        html = template.render(context)
        pdf = render_to_pdf('notepdf.html', context)
        if pdf:
            response = HttpResponse(pdf, content_type='application/pdf')
            filename = "Notespdf_%s.pdf" %("12341231")
            content = "inline; filename='%s'" %(filename)
            download = request.GET.get("download")
            if download:
                content = "attachment; filename='%s'" %(filename)
            response['Content-Disposition'] = content
            return response
        return HttpResponse("Not found")